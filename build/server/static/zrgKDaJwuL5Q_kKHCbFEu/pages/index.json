{"pageProps":{"blogs":[{"title":"Use Context API, avoid Props Drilling","tldr":"I bet everyone who works with React on day to day basis knows what it \"Props Drilling\". Passing props down the component tree can become quite a burden. Hers is how Context API can solve that problem!","tags":["reactjs","context","api","provider","state","reducer","props","drilling","hooks"],"content":"## Props Drilling\nLets look at this example component\n![component](https://rem-blog-bucket.s3.amazonaws.com/assets/bb810891-4e6d-4175-a01a-b9df55e866b8-screen-1-png)\n\nAs you can see, `Dashboard` is a sort of a Controller component that manages state using `React.useReducer`. It passes actions down to child components. \n\nIn some cases this is absolutely fine. However as your application grows you may run into a situation when most distant child needs state or an action from root parent component. \n\n```javascript\n<RootParent>\n  <NestedChild>\n    <DeeperNestedChild>\n      < TheDeepestChildThatNeedsState />\n    </DeeperNestedChild>\n  </NestedChild>\n</RootParent>\n```\nThis is called \"Props Drilling\". Passing props down the component tree to child that needs it.\n\nAs a developer I try to recognize moments like that because maintaining that type of code in the future will be very hard. Thankfully its never too late to refactor! Well, I hope... \n\n![refactor](https://rem-blog-bucket.s3.amazonaws.com/assets/dc8d1894-6944-4765-987c-b30ae3c227e3-refactor-time-jp)\n\n## Context\n\n> Context provides a way to pass data through the component tree without having to pass props down manually at every level.\n\nNow lets see how we can refactor our example to utilize Context API.\n\nFirst of all lets understand how it works.\n![context-api-example](https://rem-blog-bucket.s3.amazonaws.com/assets/c31e96fe-1a6b-49c7-81cc-f8cfd89de918-context-basic-ex)\n\nYou can create Context using `React.createContext` and pass default value of the context. Once that is done you can wrap your components with ContextProvider, hence making its value available across every child component. Neat right?! \n\nNow let's come back to our example and refactor it using Context API and React Hooks. \n\n\n### Let's clean up and put code in its own files\n![file structure](https://rem-blog-bucket.s3.amazonaws.com/assets/578fa985-4d1d-4bc5-9c73-377103dfabfc-screen-shot-2020)\n\n#### Actions\nDefine all actions in **actions.js** pay attention that it exports function that requires `dispatch` prop in order to trigger an action and exports function wrapper around dispatch.\n![actions.js](https://rem-blog-bucket.s3.amazonaws.com/assets/0cdfb522-313b-4101-af9c-121ef15ed7ce-actions-png)\n\n#### Reducers\nCorresponding reducers in **reducers.js**. It contains our `initialState` and `reducers` function to handle state updates.\n![reducers.js](https://rem-blog-bucket.s3.amazonaws.com/assets/683483e6-a0bf-4fd1-a8a1-76efd5f7038c-reducers-png)\n\n#### useData hook\nConnecting actions and reducers in simple yet elegant hook **useData.js** that will export _state_ and actions. \n![useData.js](https://rem-blog-bucket.s3.amazonaws.com/assets/e7290cb7-db9c-4e30-94e4-cb25a0697436-usedata-png)\n\n#### useCtx hook\nNow lets put utility function that will create context and export `useCtx` hook and Context Provider in **createCtx.js**\n![createCtx.js](https://rem-blog-bucket.s3.amazonaws.com/assets/0feab02e-9c82-4a73-907c-133902c44fe0-createctx-png)\n\n#### contextApi.jsx\nHere is where all the magic happens **contextApi.jsx**.  \n![useContextApi.js](https://rem-blog-bucket.s3.amazonaws.com/assets/169291a1-3d45-47d0-8d02-9cb1372d3967-usecontextapi-pn)\n\nLet's break this one down. \n\n_First_ we create context using `createCtx()` and export hook `useDataContext` this will be used in child components to get access to state and actions.\n\n_Second_ we export `DataProvider` that will wrap child components and utilize our `useData` hook that will create our state from reducers and actions.\n\n#### And finally **App.jsx** \n![App.jsx](https://rem-blog-bucket.s3.amazonaws.com/assets/9a589ebe-6c93-411b-b57d-d9e9d7c78712-app-png)\n\nClean isn't it? No props are being passed to child components. \n\nHere is **Filters.js** example on how to consume state and grab action from the Context\n![filters.js](https://rem-blog-bucket.s3.amazonaws.com/assets/23f01328-22d9-4462-9af8-ec0755759b0e-filters-context-)\n\n\nIf you want to play around with example here is the [Link](https://github.com/rem4ik4ever/blog-content/tree/master/context-api)\n\n\n## Conclusion\n\nObviously its up to you how you want to manage state in your application and what state management architecture suits your case. But if you faced \"Props Drilling\" problem, I think Context API is the way to go!\n\n![drake meme](https://rem-blog-bucket.s3.amazonaws.com/assets/88ea46b3-1081-45aa-b5ed-bf657aa9fd3e-drake-context-ap)","thumbnail":null,"status":"released","author":"Rem Kim","createdAt":"2020-04-18T20:13:27.300Z","updatedAt":"2020-04-20T03:07:43.356Z","slug":"use-context-api-avoid-props-drilling","id":1587240807300,"thumbnailUrl":"https://rem-blog-bucket.s3.amazonaws.com/assets/ba072618-5f39-4b5e-a179-4e7dd88c7788-contextapimeme-j"},{"title":"My first Blog!","tldr":"I've been reading a lot of blogs on a day to day basis, but never recorder any of my personal blogs. I think its time to catch up!","tags":["blog","writing"],"content":"### Why starting a blog? \n\nI've always wanted to start a Blog, but kept procrastinating and thinking about what tools to use. First step is always the hardest! However I've been reading a lot of other blogs on a day to day basis and realized that all of those people, at some point, started writing and kept this as a habit, consistently writing their thoughts and ideas and putting it out there for people like me, to read it. \n\nI knew I have experience and desire to start it, so I decided to scaffold this little blog using tools that are relevant right now [Next.js(https://nextjs.org) and [React.js(https://reactjs.org/).\n\nThere are 3 main reasons why I want to have a blog: \n\n#### Have a backlog of ideas and knowledge\nAs a Software Engineer I constantly solve different technical problems and try to come up with creative solutions. However I haven't recorded any of those solutions, nor shared publicly. Which many developers practice in their blogs. Thus helping other developers to solve similar problem and have a log of something important.\n\n#### Personal and career growth\nSoftware Engineers don't usually blog. They write code, commit code and done deal. But recruiters and big companies don't look at your code, unless its an Open Source project with a lot of followers. Developers need to stand out, they need to go beyond resume small Github projects. Companies are looking for personality. Blog is a great place to show what kind of person you are. How you reflect of problems and ideas, how you solve them and what conclusions you drew after. \n\n#### Gain more experience in writing\nEver since school I was not a good writer. My essays were usually horribly graded and I was ok with that! I was not going to be a writer anyway. Err... now I realize that is some important skill I missed out. Knowing on how to express thoughts and ideas in writing is very important. It is not the same as writing documentation for the code, no. It is when you have a brilliant idea in your head and you want to write it down in a way that tomorrow it would not sound like a complete non-sense to you! \n\n### What will I write about?\nFirst and most importantly I will write about things I'm passioned about! I like new technologies in developers world. I like solving problems. I like to express my thoughts and help people. \n\nSecond, I want to write about my personal developer experience. What I do, how I do, what I find useful and interesting. Not that my opinion stands above all others, but I always would like to make my take on something that i'm interested in. \n\n### Here we go!\nLike I said before I've always wanted to start a Blog. And just like in Github each repository start with `initial commit`, this is my initial commit to this Blog!\n","thumbnail":null,"status":"released","author":"Rem Kim","createdAt":"2020-04-16T20:03:13.048Z","updatedAt":"2020-04-19T16:00:43.709Z","slug":"my-first-blog","id":1587067393048,"thumbnailUrl":"https://rem-blog-bucket.s3.amazonaws.com/assets/d2796a70-beb8-4270-9f27-f8c4ff737933-typewriter-jpg"}]},"__N_SSG":true}