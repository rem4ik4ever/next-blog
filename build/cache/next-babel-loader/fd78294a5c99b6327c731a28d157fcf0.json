{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport ErrorPage from \"next/error\";\nimport fetch from \"node-fetch\";\nimport { Flex, Box, Button, IconButton, FormControl, Input, InputRightElement, Icon, InputGroup, Select, useColorMode } from \"@chakra-ui/core\";\nimport Link from \"next/link\";\nimport MyLink from \"src/utils/MyLink\";\nimport StatusTag from \"src/components/StatusTag\";\nimport { useBlogsFilter } from \"src/cms/blogs/hooks\";\nimport { useState } from \"react\";\nimport { BlogStatus } from \"src/enums/BlogStatus\";\n\nconst CmsIndex = ({\n  blogs\n}) => {\n  if (true) {\n    return __jsx(ErrorPage, {\n      statusCode: 404\n    });\n  }\n\n  const {\n    0: filters,\n    1: setFilters\n  } = useState({\n    search: \"\",\n    status: \"all\"\n  });\n  const {\n    filteredBlogs\n  } = useBlogsFilter(blogs, filters);\n  const {\n    colorMode\n  } = useColorMode();\n  const bgColor = {\n    light: \"white\",\n    dark: \"gray.800\"\n  };\n  return __jsx(Flex, {\n    direction: \"column\"\n  }, __jsx(Flex, {\n    justify: \"space-between\"\n  }, __jsx(Link, {\n    href: \"/cms/files\"\n  }, __jsx(Button, {\n    leftIcon: \"attachment\",\n    w: \"full\",\n    backgroundColor: \"teal.400\",\n    color: \"white\"\n  }, \"Files\"))), __jsx(Flex, {\n    align: \"center\",\n    mt: \"4\"\n  }, __jsx(FormControl, {\n    w: \"full\"\n  }, __jsx(InputGroup, null, __jsx(Input, {\n    type: \"text\",\n    name: \"search\",\n    placeholder: \"Filter\",\n    value: filters.search,\n    onChange: ev => {\n      setFilters(_objectSpread({}, filters, {\n        search: ev.target.value\n      }));\n    }\n  }), __jsx(InputRightElement, {\n    children: __jsx(Icon, {\n      name: \"search\",\n      color: \"gray.500\"\n    })\n  }))), __jsx(FormControl, null, __jsx(Select, {\n    value: filters.status,\n    onChange: ev => {\n      setFilters(_objectSpread({}, filters, {\n        status: ev.target.value\n      }));\n    }\n  }, __jsx(\"option\", {\n    value: \"all\"\n  }, \"ALL\"), Object.keys(BlogStatus).map(status => __jsx(\"option\", {\n    key: status,\n    value: status\n  }, status.toUpperCase()))))), filteredBlogs.map((blog, idx) => {\n    var _blog$status;\n\n    return __jsx(Box, {\n      key: `blog-${idx}`,\n      backgroundColor: bgColor[colorMode],\n      p: \"2\",\n      my: \"2\"\n    }, __jsx(Flex, {\n      justify: \"space-between\",\n      align: \"center\"\n    }, __jsx(Box, null, __jsx(StatusTag, {\n      mr: \"2\",\n      status: blog.status\n    }, (_blog$status = blog.status) === null || _blog$status === void 0 ? void 0 : _blog$status.toUpperCase()), __jsx(MyLink, {\n      href: `/blog/${blog.slug}`\n    }, blog.title)), __jsx(Link, {\n      href: `/cms/write/${blog.id}`\n    }, __jsx(IconButton, {\n      icon: \"edit\",\n      \"aria-label\": \"edit post\"\n    }))));\n  }));\n};\n\nexport const getServerSideProps = async () => {\n  try {\n    const payload = await (await fetch(`${process.env.NOW_URL}/api/blogs`)).json();\n    const blogs = payload.sort((a, b) => {\n      if (a.createdAt > b.createdAt) return -1;\n      if (a.createdAt < b.createdAt) return 1;\n      return 0;\n    });\n    return {\n      props: {\n        blogs\n      }\n    };\n  } catch (error) {\n    console.error(\"Error\", error);\n    return {\n      props: {\n        blogs: []\n      }\n    };\n  }\n};\nexport default CmsIndex;","map":null,"metadata":{},"sourceType":"module"}