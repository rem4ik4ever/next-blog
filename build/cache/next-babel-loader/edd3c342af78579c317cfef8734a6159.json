{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport axios from \"axios\";\nimport { useState, createRef } from \"react\";\nimport { formatFilename } from \"src/utils/files\";\nimport { uploadToS3 } from \"src/utils/aws-helper/s3Upload\";\nimport { Button, FormControl, FormLabel, Input, FormHelperText, useToast } from \"@chakra-ui/core\";\n\nvar saveToFilesystem = function saveToFilesystem(file, url) {\n  return _regeneratorRuntime.async(function saveToFilesystem$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(axios.post(\"/api/files\", {\n            name: file.name,\n            filetype: file.filetype,\n            size: file.size,\n            url: url\n          }));\n\n        case 3:\n          _context.next = 8;\n          break;\n\n        case 5:\n          _context.prev = 5;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(\"FS save error\", _context.t0.message);\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 5]], Promise);\n};\n\nvar FileUpload = function FileUpload() {\n  var _useState = useState([]),\n      files = _useState[0],\n      setFiles = _useState[1];\n\n  var _useState2 = useState(false),\n      isUploading = _useState2[0],\n      setUploading = _useState2[1];\n\n  var fileInputRef = createRef();\n  var toast = useToast();\n\n  var handleSubmit = function handleSubmit(event) {\n    var result;\n    return _regeneratorRuntime.async(function handleSubmit$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            event.preventDefault();\n            setUploading(true);\n            _context2.prev = 2;\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(axios.post(\"/api/files/sign-s3\", {\n              filename: formatFilename(files[0].name),\n              filetype: files[0].type\n            }));\n\n          case 5:\n            result = _context2.sent;\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(uploadToS3(files[0], result.data.signedRequest));\n\n          case 8:\n            _context2.next = 10;\n            return _regeneratorRuntime.awrap(saveToFilesystem(files[0], result.data.url));\n\n          case 10:\n            toast({\n              title: \"File saved\",\n              description: \"All good!\",\n              status: \"success\",\n              duration: 2000,\n              isClosable: true\n            });\n            setTimeout(function () {\n              location.reload();\n            }, 2000);\n            _context2.next = 18;\n            break;\n\n          case 14:\n            _context2.prev = 14;\n            _context2.t0 = _context2[\"catch\"](2);\n            console.error(\"Error uploading image\", _context2.t0.message);\n            toast({\n              title: \"Failed to save file\",\n              description: \"Please try again later\",\n              status: \"error\",\n              duration: 2000,\n              isClosable: true\n            });\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[2, 14]], Promise);\n  };\n\n  var onChangeHandler = function onChangeHandler(event) {\n    if (event.target.files[0].size < 20000000) {\n      setFiles(event.target.files);\n    } else {\n      toast({\n        title: \"File too big\",\n        description: \"Maximum size 10mb\",\n        status: \"error\",\n        duration: 2000,\n        isClosable: true\n      });\n    }\n  };\n\n  return __jsx(\"form\", {\n    onSubmit: handleSubmit\n  }, __jsx(FormControl, {\n    mb: \"4\"\n  }, __jsx(FormLabel, null, \"Select file\"), __jsx(Input, {\n    type: \"file\",\n    name: \"file\",\n    id: \"file\",\n    onChange: onChangeHandler,\n    isRequired: true,\n    ref: fileInputRef\n  }), __jsx(FormHelperText, null, \"Maximum size 10mb\")), __jsx(Button, {\n    type: \"submit\",\n    variant: \"solid\",\n    color: \"white\",\n    backgroundColor: \"red.500\",\n    isDisabled: isUploading\n  }, \"Upload\"));\n};\n\nexport default FileUpload;","map":null,"metadata":{},"sourceType":"module"}