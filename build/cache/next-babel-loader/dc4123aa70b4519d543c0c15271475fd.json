{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport { Tag } from \"@chakra-ui/core\";\n\nconst getStatus = status => {\n  switch (status) {\n    case \"draft\":\n      return \"yellow\";\n\n    case \"released\":\n      return \"green\";\n\n    case \"archived\":\n      return \"gray\";\n\n    default:\n      return \"red\";\n  }\n};\n\nconst StatusTag = (_ref) => {\n  let {\n    children,\n    status\n  } = _ref,\n      otherProps = _objectWithoutProperties(_ref, [\"children\", \"status\"]);\n\n  return __jsx(Tag, _extends({\n    size: \"md\",\n    variantColor: getStatus(status)\n  }, otherProps), children);\n};\n\nexport default StatusTag;","map":null,"metadata":{},"sourceType":"module"}