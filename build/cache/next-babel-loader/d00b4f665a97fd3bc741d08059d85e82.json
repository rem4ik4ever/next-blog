{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport axios from \"axios\";\nimport { useState, createRef } from \"react\";\nimport { formatFilename } from \"src/utils/files\";\nimport { uploadToS3 } from \"src/utils/aws-helper/s3Upload\";\nimport { Button, FormControl, FormLabel, Input, FormHelperText, useToast } from \"@chakra-ui/core\";\n\nconst saveToFilesystem = async (file, url) => {\n  try {\n    await axios.post(\"/api/files\", {\n      name: file.name,\n      filetype: file.filetype,\n      size: file.size,\n      url\n    });\n  } catch (error) {\n    console.error(\"FS save error\", error.message);\n  }\n};\n\nconst FileUpload = () => {\n  const {\n    0: files,\n    1: setFiles\n  } = useState([]);\n  const {\n    0: isUploading,\n    1: setUploading\n  } = useState(false);\n  const fileInputRef = createRef();\n  const toast = useToast();\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setUploading(true);\n\n    try {\n      const result = await axios.post(\"/api/files/sign-s3\", {\n        filename: formatFilename(files[0].name),\n        filetype: files[0].type\n      });\n      await uploadToS3(files[0], result.data.signedRequest);\n      await saveToFilesystem(files[0], result.data.url);\n      toast({\n        title: \"File saved\",\n        description: \"All good!\",\n        status: \"success\",\n        duration: 2000,\n        isClosable: true\n      });\n      setTimeout(() => {\n        location.reload();\n      }, 2000);\n    } catch (error) {\n      console.error(\"Error uploading image\", error.message);\n      toast({\n        title: \"Failed to save file\",\n        description: \"Please try again later\",\n        status: \"error\",\n        duration: 2000,\n        isClosable: true\n      });\n    }\n  };\n\n  const onChangeHandler = event => {\n    if (event.target.files[0].size < 20000000) {\n      setFiles(event.target.files);\n    } else {\n      toast({\n        title: \"File too big\",\n        description: \"Maximum size 10mb\",\n        status: \"error\",\n        duration: 2000,\n        isClosable: true\n      });\n    }\n  };\n\n  return __jsx(\"form\", {\n    onSubmit: handleSubmit\n  }, __jsx(FormControl, {\n    mb: \"4\"\n  }, __jsx(FormLabel, null, \"Select file\"), __jsx(Input, {\n    type: \"file\",\n    name: \"file\",\n    id: \"file\",\n    onChange: onChangeHandler,\n    isRequired: true,\n    ref: fileInputRef\n  }), __jsx(FormHelperText, null, \"Maximum size 10mb\")), __jsx(Button, {\n    type: \"submit\",\n    variant: \"solid\",\n    color: \"white\",\n    backgroundColor: \"red.500\",\n    isDisabled: isUploading\n  }, \"Upload\"));\n};\n\nexport default FileUpload;","map":null,"metadata":{},"sourceType":"module"}