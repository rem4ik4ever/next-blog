{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport _ from \"lodash\";\nexport function useBlogUpdate() {\n  var handleUpdate = function handleUpdate(id, payload) {\n    var result;\n    return _regeneratorRuntime.async(function handleUpdate$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(axios.put(\"/api/cms/blogs/\".concat(id), payload));\n\n          case 2:\n            result = _context.sent;\n            return _context.abrupt(\"return\", result);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return {\n    handleUpdate: handleUpdate\n  };\n}\nexport function useBlogsFilter(data, filters) {\n  // filter by title\n  // filter by status\n  var _useState = useState(data),\n      filteredBlogs = _useState[0],\n      setState = _useState[1];\n\n  useEffect(function () {\n    filterBlogs();\n  }, [data, filters]);\n\n  var filterBlogs = function filterBlogs() {\n    var blogsByStatus = [];\n    var blogsBySearch = [];\n    var searchFilter = filters.search.trim();\n\n    if (filters.status && filters.status !== \"all\") {\n      blogsByStatus = _.filter(data, function (_ref) {\n        var status = _ref.status;\n        return status === filters.status;\n      });\n    } else {\n      blogsByStatus = data;\n    }\n\n    if (searchFilter && String(searchFilter).length > 0) {\n      var tagsMatch = _.filter(data, function (_ref2) {\n        var tags = _ref2.tags;\n        return _.intersection(tags, searchFilter.toLowerCase().split(\" \")).length > 0;\n      });\n\n      var titleMatch = _.filter(data, function (_ref3) {\n        var title = _ref3.title;\n        return title.toLowerCase().includes(searchFilter.toLowerCase()) || searchFilter.toLowerCase().includes(title.toLowerCase());\n      });\n\n      if (tagsMatch.length > 0 && titleMatch.length > 0) {\n        blogsBySearch = _.intersection(tagsMatch, titleMatch);\n      } else {\n        blogsBySearch = tagsMatch.concat(titleMatch);\n      }\n    } else {\n      blogsBySearch = data;\n    }\n\n    setState(_.intersection(blogsBySearch, blogsByStatus));\n  };\n\n  return {\n    filteredBlogs: filteredBlogs\n  };\n}","map":null,"metadata":{},"sourceType":"module"}