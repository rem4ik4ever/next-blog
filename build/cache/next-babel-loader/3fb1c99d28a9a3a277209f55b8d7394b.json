{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { Box, Heading, Flex, Button, FormControl, FormLabel, Input, FormHelperText, Tag, TagIcon, Stack, TagLabel, Switch, Textarea, Select, Icon, Text } from \"@chakra-ui/core\";\nimport TagInput from \"src/components/TagInput\";\nimport ReactMarkdown from \"react-markdown\";\nimport Card from \"src/components/Card\";\nimport ChakraUIRenderer from \"chakra-ui-markdown-renderer\";\nimport { BlogStatus } from \"src/enums/BlogStatus\";\n\nvar StatusIcon = function StatusIcon(_ref) {\n  var status = _ref.status;\n\n  if (status === null || status === void 0 ? void 0 : status.success) {\n    return __jsx(Icon, {\n      name: \"check-circle\",\n      color: \"green.400\"\n    });\n  } else if (status === null || status === void 0 ? void 0 : status.error) {\n    return __jsx(Icon, {\n      name: \"close\",\n      color: \"red.400\"\n    });\n  }\n\n  return null;\n};\n\nvar StatusText = function StatusText(_ref2) {\n  var status = _ref2.status;\n  var text = null;\n\n  if (status === null || status === void 0 ? void 0 : status.success) {\n    text = __jsx(Text, {\n      color: \"green.400\"\n    }, \"Blog saved\");\n  } else if (status === null || status === void 0 ? void 0 : status.error) {\n    text = __jsx(Text, {\n      color: \"red.400\"\n    }, \"Failed to save\");\n  }\n\n  return __jsx(Flex, {\n    align: \"center\",\n    mr: 5\n  }, text);\n};\n\nvar BlogForm = function BlogForm(_ref3) {\n  var formik = _ref3.formik;\n\n  var _useState = useState(false),\n      showPreview = _useState[0],\n      togglePreview = _useState[1];\n\n  var _useState2 = useState(false),\n      showToast = _useState2[0],\n      toggleToast = _useState2[1];\n\n  useEffect(function () {\n    var _formik$status, _formik$status2;\n\n    if (((_formik$status = formik.status) === null || _formik$status === void 0 ? void 0 : _formik$status.success) || ((_formik$status2 = formik.status) === null || _formik$status2 === void 0 ? void 0 : _formik$status2.error)) {\n      toggleToast(true);\n      setTimeout(function () {\n        toggleToast(false);\n      }, 2000);\n    }\n  }, [formik.status]);\n\n  var addTag = function addTag(tag) {\n    formik.setFieldValue(\"tags\", [].concat(_toConsumableArray(formik.values.tags), [tag]));\n  };\n\n  var statuses = Object.keys(BlogStatus);\n  return __jsx(\"form\", {\n    onSubmit: function onSubmit(ev) {\n      formik.handleSubmit(ev);\n    }\n  }, __jsx(Box, {\n    m: \"5\"\n  }, __jsx(Heading, {\n    as: \"h1\",\n    size: \"xl\",\n    fontWeight: \"normal\",\n    textAlign: \"center\"\n  }, \"Write a blog\"), __jsx(Card, null, __jsx(Flex, {\n    direction: \"column\"\n  }, __jsx(Flex, {\n    justify: \"flex-end\"\n  }, showToast && __jsx(StatusText, {\n    status: formik.status\n  }), __jsx(FormControl, {\n    mr: \"2\"\n  }, __jsx(Select, {\n    value: formik.values.status,\n    name: \"status\",\n    onChange: formik.handleChange\n  }, statuses.map(function (status) {\n    return __jsx(\"option\", {\n      key: status,\n      value: status.toLowerCase()\n    }, status.toUpperCase());\n  }))), __jsx(Button, {\n    type: \"submit\",\n    variant: \"solid\",\n    color: \"green.400\",\n    isDisabled: formik.isSubmitting\n  }, showToast ? __jsx(StatusIcon, {\n    status: formik.status\n  }) : \"Save\")), __jsx(FormControl, {\n    w: \"full\"\n  }, __jsx(FormLabel, null, \"Title\"), __jsx(Input, {\n    type: \"text\",\n    id: \"blog-title\",\n    name: \"title\",\n    value: formik.values.title,\n    onChange: formik.handleChange\n  }), __jsx(FormHelperText, {\n    id: \"blog-title-helper-text\"\n  }, \"Write something catchy!\")), __jsx(FormControl, {\n    mt: \"2\"\n  }, __jsx(FormLabel, null, \"TL;DR\"), __jsx(Input, {\n    type: \"text\",\n    id: \"blog-tldr\",\n    name: \"tldr\",\n    value: formik.values.tldr,\n    onChange: formik.handleChange\n  }), __jsx(FormHelperText, null, \"Describe your idea a sentence\")), __jsx(FormControl, {\n    mt: \"2\"\n  }, __jsx(FormLabel, null, \"Thumbnail URL\"), __jsx(Input, {\n    type: \"text\",\n    id: \"blog-thumbnail\",\n    name: \"thumbnailUrl\",\n    value: formik.values.thumbnailUrl,\n    onChange: formik.handleChange\n  }), __jsx(FormHelperText, null, \"Main blog image\")), __jsx(Box, {\n    mt: \"2\"\n  }, __jsx(TagInput, {\n    onAdd: function onAdd(tag) {\n      return addTag(tag);\n    },\n    label: \"Blog tags\",\n    description: \"Tags helps searching\"\n  }), __jsx(Stack, {\n    spacing: 4,\n    isInline: true,\n    mt: \"4\"\n  }, formik.values.tags.map(function (tag) {\n    return __jsx(Tag, {\n      size: \"md\",\n      key: \"tag-\".concat(tag),\n      variantColor: \"cyan\"\n    }, __jsx(TagIcon, {\n      icon: \"add\",\n      size: \"12px\"\n    }), __jsx(TagLabel, null, tag));\n  }))), __jsx(FormControl, {\n    mt: \"2\"\n  }, __jsx(FormLabel, {\n    htmlFor: \"markdown-preview\"\n  }, \"Preview \", showPreview ? \"on\" : \"off\"), __jsx(Switch, {\n    id: \"markdown-preview\",\n    value: showPreview,\n    onChange: function onChange() {\n      return togglePreview(!showPreview);\n    }\n  })), showPreview ? __jsx(Box, {\n    borderTop: \"1px solid black\",\n    minH: \"420px\",\n    px: \"4\",\n    py: \"2\"\n  }, __jsx(ReactMarkdown, {\n    renderers: ChakraUIRenderer(),\n    source: formik.values.content,\n    escapeHtml: false\n  })) : __jsx(FormControl, null, __jsx(Textarea, {\n    minH: \"420px\",\n    maxH: \"1200px\",\n    name: \"content\",\n    value: formik.values.content,\n    onChange: formik.handleChange\n  }))))));\n};\n\nexport default BlogForm;","map":null,"metadata":{},"sourceType":"module"}