{"ast":null,"code":"import { BLOGS_DATA_PATH } from \"./constants\";\nimport fileSystem from \"fs\";\nconst fs = fileSystem.promises;\nconst FILES_DATA_PATH = './data/assets';\nexport const allBlogs = () => {\n  const files = fileSystem.readdirSync(BLOGS_DATA_PATH);\n  return files.map(file => {\n    return JSON.parse(fileSystem.readFileSync(`${BLOGS_DATA_PATH}/${file}`, \"utf8\"));\n  });\n};\nexport const getSlug = title => title.toLocaleLowerCase().split(\" \").map(word => word.replace(/[^0-9a-z]/gi, \"\")).join(\"-\");\nexport const generateFilename = (title, timestamp) => `${timestamp}-${getSlug(title)}.json`;\nexport const saveBlogFile = async (filename, payload) => {\n  try {\n    await fs.writeFile(`${BLOGS_DATA_PATH}/${filename}`, JSON.stringify(payload, null, 2));\n  } catch (err) {\n    console.error(\"Saving blog failed:\", err.message);\n    return false;\n  }\n\n  return true;\n};\nexport const removeOldFile = (filename, dataType = \"blogs\") => {\n  const path = dataType === 'blogs' ? BLOGS_DATA_PATH : FILES_DATA_PATH;\n  fileSystem.unlinkSync(`${path}/${filename}`);\n};\nexport const updateBlogFile = async (payload, id) => {\n  try {\n    const blogs = allBlogs();\n    const originalBlog = blogs.find(blog => String(blog.id) === String(id));\n    const currentFilename = generateFilename(originalBlog.title, originalBlog.id);\n    const filename = generateFilename(payload.title, originalBlog.id);\n    const nameChanged = filename !== currentFilename;\n    const result = await saveBlogFile(filename, payload);\n    if (!result) throw new Error(\"Failed to save blog\");\n    if (nameChanged) removeOldFile(currentFilename);\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n\n  return true;\n};","map":null,"metadata":{},"sourceType":"module"}