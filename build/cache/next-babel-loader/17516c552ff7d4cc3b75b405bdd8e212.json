{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, Flex } from \"@chakra-ui/core\";\nimport { BlogStatus } from \"src/enums/BlogStatus\";\nimport { allBlogs } from \"src/cms/blogs/utils\";\nimport BlogsList from \"src/pages/home/BlogsList\";\nimport PageSEO from \"src/components/PageSEO\";\nimport defaultConfig from \"src/utils/SEO/next-seo.config\";\n\nconst BlogIndexPage = props => {\n  const {\n    blogs\n  } = props;\n\n  const config = _objectSpread({}, defaultConfig, {\n    title: \"Blog\",\n    description: \"Browse my blogs\"\n  });\n\n  return __jsx(Box, null, __jsx(PageSEO, {\n    pageInfo: config\n  }), __jsx(Flex, {\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  }, __jsx(BlogsList, {\n    blogs: blogs,\n    label: \"Blog\"\n  })));\n};\n\nexport const getStaticProps = async () => {\n  try {\n    const payload = allBlogs();\n    const blogs = payload.filter(blog => blog.status === BlogStatus.released).sort((a, b) => {\n      if (a.createdAt > b.createdAt) return -1;\n      if (a.createdAt < b.createdAt) return 1;\n      return 0;\n    });\n    return {\n      props: {\n        blogs\n      }\n    };\n  } catch (error) {\n    console.error(error.message);\n    return {\n      props: {\n        blogs: []\n      }\n    };\n  }\n};\nexport default BlogIndexPage;","map":null,"metadata":{},"sourceType":"module"}