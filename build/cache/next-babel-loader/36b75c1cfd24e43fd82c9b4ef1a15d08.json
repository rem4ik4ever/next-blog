{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport { v4 } from 'uuid';\nimport { FILES_DATA_PATH } from './constants';\nexport const allFiles = () => {\n  const files = fs.readdirSync(FILES_DATA_PATH);\n  const parsedFiles = files.map(file => {\n    return _objectSpread({}, JSON.parse(fs.readFileSync(`${FILES_DATA_PATH}/${file}`, 'utf8')), {\n      filename: file\n    });\n  });\n  return parsedFiles.sort((a, b) => {\n    const aDate = new Date(a.createdAt);\n    const bDate = new Date(b.createdAt);\n    if (aDate > bDate) return -1;\n    if (aDate < bDate) return 1;\n    return 0;\n  });\n};\nexport const formatFilename = (filename, uuid) => {\n  const randomString = uuid || v4();\n  const cleanFileName = filename.toLowerCase().replace(/[^a-z0-9]/, '-');\n  const newFilename = `assets/${randomString}-${cleanFileName}`;\n  return newFilename.substring(0, 60);\n};\nexport const makeFilename = ({\n  id,\n  name\n}) => `${id}-${name.toLowerCase().split(' ').join('-')}.json`;\nexport const writeJSONToFile = async (path, file) => {\n  const filename = makeFilename(file);\n  await fs.promises.writeFile(`${path}/${filename}`, JSON.stringify(file, null, 2));\n};\nexport const saveImageSizeToFile = async (source, size, uploadPayload) => {\n  const files = allFiles();\n  const file = files.find(fl => fl.url === source);\n  file.sizes = file.sizes || {};\n  file.sizes[size] = uploadPayload;\n  await writeJSONToFile(FILES_DATA_PATH, file);\n};","map":null,"metadata":{},"sourceType":"module"}