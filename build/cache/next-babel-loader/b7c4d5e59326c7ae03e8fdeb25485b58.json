{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport BlogContent from \"src/pages/blog/BlogContent\";\nimport { allBlogs } from \"src/cms/blogs/utils\";\nimport PageSEO from \"src/components/PageSEO\";\nimport defaultConfig from \"src/utils/SEO/next-seo.config\";\n\nconst BlogPage = ({\n  blog\n}) => {\n  const siteUrl = `https://remkim.com/blog/${blog.slug}`;\n\n  const config = _objectSpread({}, defaultConfig, {\n    title: blog.title,\n    description: blog.tldr,\n    canonical: siteUrl,\n    openGraph: {\n      url: siteUrl,\n      title: blog.title,\n      description: blog.tldr,\n      site_name: \"Rem Kim\",\n      locale: 'en-US',\n      images: [{\n        url: blog.thumbnailUrl\n      }]\n    }\n  });\n\n  return __jsx(React.Fragment, null, __jsx(PageSEO, {\n    pageInfo: config\n  }), __jsx(BlogContent, {\n    blog: blog\n  }));\n};\n\nexport const getStaticPaths = async () => {\n  try {\n    const blogs = allBlogs();\n    const slugs = blogs.map(x => x.slug);\n    const paths = slugs.map(slug => ({\n      params: {\n        slug\n      }\n    }));\n    return {\n      paths,\n      fallback: false\n    };\n  } catch (error) {\n    console.error(\"Static patch err:\", error.message);\n    return {\n      paths: [],\n      fallback: false\n    };\n  }\n};\nexport const getStaticProps = async ({\n  params: {\n    slug\n  }\n}) => {\n  try {\n    const payload = allBlogs();\n    const blog = payload.find(bl => bl.slug === slug);\n    return {\n      props: {\n        blog\n      }\n    };\n  } catch (error) {\n    console.error(\"Static prop err: \", error);\n    return {\n      props: {\n        blog: null\n      }\n    };\n  }\n};\nexport default BlogPage;","map":null,"metadata":{},"sourceType":"module"}