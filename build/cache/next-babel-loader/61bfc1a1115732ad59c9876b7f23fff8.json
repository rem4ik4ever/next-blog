{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { allBlogs, getSlug, updateBlogFile } from \"src/cms/blogs/utils\";\nimport { BlogStatus } from \"src/enums/BlogStatus\";\n\nconst find = async (req, res) => {\n  const {\n    id\n  } = req.query;\n  const blogs = allBlogs();\n  const blog = blogs.find(blog => String(blog.id) === String(id));\n\n  if (!blog) {\n    res.statusCode = 404;\n    res.end();\n  } else {\n    res.statusCode = 200;\n    res.end(JSON.stringify(blog));\n  }\n};\n\nconst update = async (req, res) => {\n  try {\n    const {\n      id\n    } = req.query;\n\n    const payload = _objectSpread({}, req.body, {\n      updatedAt: new Date().toISOString(),\n      slug: getSlug(req.body.title),\n      status: BlogStatus[req.body.status]\n    });\n\n    const result = await updateBlogFile(payload, String(id));\n    if (!result) throw new Error(\"Failed to update file\");\n    res.statusCode = 200;\n    res.end(JSON.stringify(payload));\n  } catch (error) {\n    res.statusCode = 404;\n    res.end();\n  }\n};\n\nconst handler = async (req, res) => {\n  switch (req.method) {\n    case \"PUT\":\n      update(req, res);\n      break;\n\n    default:\n      find(req, res);\n      break;\n  }\n};\n\nexport default handler;","map":null,"metadata":{},"sourceType":"module"}