{
  "title": "How to ace Technical Interview!",
  "tldr": "Here are my tips on preparing for Coding Interview",
  "tags": [
    "programming",
    "coding",
    "challenge",
    "problem",
    "hiring",
    "developer"
  ],
  "content": "Intro to what is Technical Interview\n\n[Tips on preparing for an interview](/blog/tips-on-preparing-for-an-interview-as-a-software-engineer)\n\n- TLDR Point to previous blog post \n- Describe type of Coding Interviews\n-  Tips: \n  - Read description carefully\n  - Ask questions about edge cases\n  - First Viable Solution \n  - Improve solution\n  - Write tests\n- Conclusion\n\n\n## What is Technical Interview?\n\nIn order to prove that you qualify for a Software Engineering position that you are applying to, you need to pass all technical interviews. Usually it is a 3 separate interviews depending on company but not less than 2. \n\n- Initial filtering (Algorithm problem, Homework challenge) \n- Second round (Algorithm / System design problem)\n- Final Round (System design / Domain specific interview)\n\n### Algorithm problems \n\nIf you are not prepared and/or didn't brush up your knowledge about data structures you will fail. \n\n__How to prepare for it?__\n\n__[LeetCode](www.leetcode.com)__ is a good source of coding problems to solve. If you are serious about preparation and getting hired by FAANG companies I'd suggest purchasing a subscription that will unlock additional questions and faster compile time. \n\n__[Grokking Algorithms](https://amzn.to/3frGoCD)__ if you are new to algorithms and want to read about it first, this book is a great starting point. Very descriptive illustrations will help you to visually understand how those algorithms work.\n\n__Practice a lot.__ You never know what problem you will get, so the more you practice the higher chance you will solve it.\n\n \n### System design \n\nThis interview type will test your knowledge of building complex applications. Scalability, resilience, caching strategy and much more is going to be part of this interview. You will need to explain your solution and also explain why you made certain decisions. \n\n__How to prepare for it?__\n\n__[Designing Data-Intensive Applications](https://amzn.to/3jmjmxY)__ - this book has it all. Distributed systems, databases, how tos, whys, limitations and much more. It is a pretty big book, but I suggest you read it. \n\n__Build your own projects__ - try building you own side projects. Most of the AWS resources can be easily enabled as a free tier so you can have your own playground and build what ever you want. \n \n",
  "thumbnail": null,
  "status": "draft",
  "author": "Rem Kim",
  "createdAt": "2021-08-01T17:18:32.051Z",
  "updatedAt": "2021-08-03T22:39:32.565Z",
  "slug": "how-to-ace-technical-interview",
  "id": 1627838312051,
  "releasedAt": null,
  "thumbnailUrl": "https://rem-blog-bucket.s3.us-east-2.amazonaws.com/assets/09e97b32-47a6-4f0f-b181-99ee841ae524-600.png"
}