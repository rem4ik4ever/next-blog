{
  "title": "How to make Autocomplete in React.js with Fuse.js",
  "tldr": "In this guide I will teach you how to build Autocomplete input with Fuse.js and React.js",
  "tags": [
    "react.js",
    "fuse.js",
    "styled-components",
    "guide",
    "autocomplete"
  ],
  "content": "## Demo project setup\n\nFirst up let's create new React app. This should setup React using `create-react-app`.\n```command-line\nnpx create-react-app autocomplete-demo\ncd autocomplete-demo\nyarn start\n```\n\nNext we will need 2 extra dependencies [Fuse.js](https://fusejs.io/) and [Styled Components](https://styled-components.com/).\n\n__Fuse.js__ will help us with fuzzy search on client side since we will not be storing user searches anywhere but on a client side.\n\n__Styled Components__ is to make everything look pretty\n \nLet's install those\n\n```command-line\nyarn add fuse.js styled-components\n```\nNow that everything is installed, let's get to coding part!\n\n## Autocomplete component\n\nFirst create folder named Autocomplete and index.js file\n```command-line\nmkdir Autocomplete\ntouch Autocomplete/index.js\n```\n\nThere are 3 core elements in this Autocomplete component implementation:\n- Input for entering text\n- Suggestions list\n- Shadow word match \n\n```jsx\n\nexport const Autocomplete = () => {\n  const [searchTerm, setText] = useState(\"\");\n  const [searchHistory, setHistory] = useState([]);\n  const handleSubmit = (ev) => {\n    ev.preventDefault();\n    const set = new Set([...searchHistory, searchTerm]);\n    setHistory([...set]);\n    setText(\"\");\n  };\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"search\" // this gives us ability to clear input with Esc key\n          value={searchTerm}\n          onChange={(ev) => setText(ev.target.value)}\n          placeholder=\"eg. I do autocomplete for living\"\n        />\n      </form>\n      {/* suggestions list */}\n      <div>\n        <div show={searchTerm.length > 0 && searchHistory.length > 0}>\n          <ol>\n            {searchHistory.map((search) => (\n              <li key={search}>{search}</li>\n            ))}\n          </ol>\n        </div>\n      </div>\n    </div>\n  );\n};\n```\n\nThis is what we have so far. Every time user submits search query we add it to searchHistory and show it in the list.\n![step1](https://rem-blog-bucket.s3.amazonaws.com/assets/3f5de6ab-b8a2-4702-945f-9009604dac43-screen-shot-2021)\n\nNow I know this is already looks very pretty but let's do some styling. Let's create `styles.js` file and add our styled-components there. \n\n```command-line\ntouch Autocomplete/styles.js\n```\n\nstyles.js\n```jsx\nimport styled from \"styled-components\";\n\nexport const AutocompleteContainer = styled.div`\n  width: 450px;\n  margin: 0 auto;\n`;\n\nexport const SuggestionsContainer = styled.div`\n  position: relative;\n`;\n\nexport const SuggestionsDropdown = styled.div`\n  position: absolute;\n  width: 100%;\n  border: 2px solid gainsboro;\n  border-radius: 4px;\n  margin-top: 2px;\n  box-sizing: border-box;\n  display: ${({ show }) => (show ? \"block\" : \"none\")};\n`;\n\nexport const Input = styled.input`\n  width: 100%;\n  padding: 1.1rem;\n  border: 2px solid gainsboro;\n  border-radius: 4px;\n  font-size: 1.2rem;\n  z-index: 10;\n  background: transparent;\n\n  &:focus {\n    outline: none;\n    border-color: lightblue;\n    box-shadow: 0 0 4px lightblue;\n  }\n`;\n\nexport const List = styled.ol`\n  list-style: none;\n  text-align: start;\n  font-size: 1.1rem;\n  padding: 0;\n  margin: 0;\n`;\n\nexport const SuggestionItem = styled.li`\n  padding: 1.1rem;\n  transition: all 250ms ease-in-out;\n  &:hover {\n    background: #cccccc;\n  }\n`;\n\nexport const MatchShadow = styled.div`\n  position: absolute;\n  border: 2px solid transparent;\n  padding: 1.1rem;\n  border-radius: 4px;\n  font-size: 1.2rem;\n  color: #cccccc;\n  z-index: -1;\n  user-select: none;\n  background: transparent;\n  top: 0;\n`;\n```\nThis should be enough, this contains enough styling for every element that we use.\n\nAutocomplete\n```jsx\nimport { useState } from \"react\";\nimport {\n  AutocompleteContainer,\n  Input,\n  List,\n  SuggestionItem,\n  SuggestionsContainer,\n  SuggestionsDropdown\n} from \"./styles\";\n\nexport const Autocomplete = () => {\n  const [searchTerm, setText] = useState(\"\");\n  const [searchHistory, setHistory] = useState([]);\n  const handleSubmit = (ev) => {\n    ev.preventDefault();\n    const set = new Set([...searchHistory, searchTerm]);\n    setHistory([...set]);\n    setText(\"\");\n  };\n  return (\n    <AutocompleteContainer>\n      <form onSubmit={handleSubmit} style={{ position: \"relative\" }}>\n        <Input\n          type=\"search\"\n          value={searchTerm}\n          onChange={(ev) => setText(ev.target.value)}\n          placeholder=\"eg. I do autocomplete for living\"\n        />\n      </form>\n      {/* suggestions list */}\n      <SuggestionsContainer>\n        <SuggestionsDropdown\n          show={searchTerm.length > 0 && searchHistory.length > 0}\n        >\n          <List>\n            {searchHistory.map((search) => (\n              <SuggestionItem key={search}>{search}</SuggestionItem>\n            ))}\n          </List>\n        </SuggestionsDropdown>\n      </SuggestionsContainer>\n    </AutocompleteContainer>\n  );\n};\n```\n\n## Fuse.js\n\nTime to add fuse.js and make our Autocomplete somewhat smart in its suggestions.\n\n```command-line\ntouch Autocomplete/useFuse.js\n```\n\nHere is a `useFuse` hook that we will use to make suggestions.\n\n```javascript\nimport { useEffect, useRef, useState } from \"react\";\nimport Fuse from \"fuse.js\";\n\nexport function useFuse(searchTerm, items, options = {}) {\n  const fuse = useRef();\n  const [suggestions, setSuggestions] = useState([]);\n  useEffect(() => {\n    fuse.current = new Fuse(items, options);\n  }, [items, options]);\n  useEffect(() => {\n    const items = fuse.current.search(searchTerm);\n    setSuggestions(items.map(({ item }) => item));\n  }, [searchTerm]);\n\n  return suggestions;\n}\n```\nEvery time we update `searchTerm` fuse will run search on that updated term and set new suggestions based on it. \n\nInjecting `useFuse` into Autocomplete component\n```diff\nimport { useState } from \"react\";\nimport {\n  AutocompleteContainer,\n  Input,\n  List,\n  MatchShadow,\n  SuggestionItem,\n  SuggestionsContainer,\n  SuggestionsDropdown\n} from \"./styles\";\n+import { useFuse } from \"./useFuse\";\n\nexport const Autocomplete = () => {\n  const [searchTerm, setText] = useState(\"\");\n  const [searchHistory, setHistory] = useState([]);\n  const handleSubmit = (ev) => {\n    ev.preventDefault();\n    const set = new Set([...searchHistory, searchTerm]);\n    setHistory([...set]);\n    setText(\"\");\n  };\n+  const suggestions = useFuse(searchTerm, searchHistory);\n+  const exactMatch = (query, text) => {\n+    const regex = new RegExp(`^${query}`);\n+    return regex.test(text);\n+  };\n  return (\n    <AutocompleteContainer>\n      <form onSubmit={handleSubmit} style={{ position: \"relative\" }}>\n        <Input\n          type=\"search\"\n          value={searchTerm}\n          onChange={(ev) => setText(ev.target.value)}\n          placeholder=\"eg. Mazda, Toyota, Porshe\"\n        />\n+        <MatchShadow>\n+          {suggestions.length > 0 &&\n+            exactMatch(searchTerm, suggestions[0]) &&\n+            suggestions[0]}\n+        </MatchShadow>\n      </form>\n      {/* suggestions list */}\n      <SuggestionsContainer>\n        <SuggestionsDropdown\n          show={searchTerm.length > 0 && suggestions.length > 0}\n        >\n          <List>\n            {suggestions.map((search) => (\n              <SuggestionItem key={search}>{search}</SuggestionItem>\n            ))}\n          </List>\n        </SuggestionsDropdown>\n      </SuggestionsContainer>\n    </AutocompleteContainer>\n  );\n};\n\n```\n\nThis block adds usage of `useFuse` and pipes in searchHistory and searchTerm. \n```jsx\n  const suggestions = useFuse(searchTerm, searchHistory);\n  const exactMatch = (query, text) => {\n    const regex = new RegExp(`^${query}`);\n    return regex.test(text);\n  };\n```\n\nThis is a helper function that will check if suggestion is exact match with query that user types in. If yes we will show autocomplete shadow of the suggested word in the input. Giving it a very nice touch for UX.\n```jsx\n  const exactMatch = (query, text) => {\n    const regex = new RegExp(`^${query}`);\n    return regex.test(text);\n  };\n```\n\nFinally here we add `MatchShadow` styled component and adding our exact match and other conditional checks to make sure we show it only when we have suggestions and it is an exact match. \n```jsx\n        <MatchShadow>\n          {suggestions.length > 0 &&\n            exactMatch(searchTerm, suggestions[0]) &&\n            suggestions[0]}\n        </MatchShadow>\n```\n\n## Result\n\nWith all that in place let's check final result!\n\nAfter user types in few searches and submits them \n![Populate history](https://rem-blog-bucket.s3.amazonaws.com/assets/7d617b95-dc57-4a5c-a681-8f4e8c73033e-screen-shot-2021)\n\nAnd if user request is exact match from previous search\n![exact match search](https://rem-blog-bucket.s3.amazonaws.com/assets/2c9ff001-7a58-4ba1-8a34-26bf464cab23-screen-shot-2021)\n\n### I hope you found this guide useful! Thank you for reading.\n\n\n## Links\n- [Source code](https://github.com/rem4ik4ever/autocomplete-demo)\n- [Sandbox](https://codesandbox.io/s/polished-firefly-ur2of?file=/src/Autocomplete/index.js)",
  "thumbnail": null,
  "status": "released",
  "author": "Rem Kim",
  "createdAt": "2021-08-20T01:39:43.672Z",
  "updatedAt": "2021-08-21T00:34:43.189Z",
  "slug": "how-to-make-autocomplete-in-reactjs-with-fusejs",
  "id": 1629423583672,
  "releasedAt": "2021-08-21T00:34:42.802Z",
  "thumbnailUrl": "https://rem-blog-bucket.s3.amazonaws.com/assets/28a95f12-0ea8-4a88-ba98-46457979c409-screen-shot-2021"
}