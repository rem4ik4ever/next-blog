{
  "title": "Setting up your Next.js Blog",
  "tldr": "How to setup and deploy your Next.js Blog? In this series I will describe the process of setting up Next.js project and deploying it to vercel.com",
  "tags": [
    "next.js",
    "vercel.com",
    "blog",
    "development",
    "deploy",
    "guide"
  ],
  "content": "### System requirements\n- [Node 10.13](https://nodejs.org/en/) or later\n- Linux, MacOS system\n\n### Getting Started\nLet's first install Next.js default starter project. In your terminal type\n```\nnpx create-next-app YOUR_APP_NAME\n```\nThis command will create a folder for your project and ask you if you want to install `Default starter project` or use existing Next.js templates from repository of examples. But we will use `Default starter project`.\n\nIf you don't want to use `create-next-app` just create project directory and run: \n```\nyarn init next-app\nor \nnpm create next-app\n```\nThis will also create a project for you. \n\nNow let's look at the structure of the created project.\n```\n.gitignore\nREADME.md\nnode_modules\npackage.json\npages\npublic\nyarn.lock\n```\n\nLet's go ahead and run a development server. Go to your terminal and type \n```\nyarn dev\n```\nThe default port is set to 3000 and once you navigate to `localhost:3000` in your browser you should see\n![Next.js Index page](https://rem-blog-bucket.s3.us-east-2.amazonaws.com/assets/86034f39-5348-410c-a5fa-04f06455c3b1-450.png)\n\n## Next.js commands\nIf you take a look at `package.json` file you will see that by default you will have 3 commands to run:\n- `dev` - run a development server with development features such as hot reload\n- `build` - creates an optimized production build of your project \n- `start` - run a server. In a production mode based on your recent build\n\n## Pages\nEverything we want to serve on the screen is stored in pages. Let's go ahead and edit existing `pages/index.js` file. \n\nFirst we will erase existing content of the file and add our own.\n```javascript\n const Home = () => {\n   return(\n     <div>\n       <h1>Welcome to my blog!</h1>\n     </div>\n   )\n }\n\n export default Home;\n```\n\nAlso let's create another page and call it About page in `pages/about.js`\n```javascript\n const About = () => {\n   return(\n     <div>\n       <h1>This page is about me!</h1>\n     </div>\n   )\n }\n\n export default About;\n```\n\nGood, now let's link those pages together and add some routing navigation. For that we will use 'Link' component from `next/link`\n\nadd the following line at the top of the `pages/index.js` and `pages/about.js`\n```javascript\nimport Link from 'next/link';\n```\nLet's update our pages to include links to each other.\n\n\n*_index.js_*\n```javascript\nimport Link from 'next/link';\n\nconst Home = () => {\n  return (\n    <div>\n      <h1>Welcome to my blog!</h1>\n      <Link href=\"/about\">Learn more about me!</Link>\n    </div>\n  );\n};\n\nexport default Home;\n````\n\n\n*_about.js_*\n```javascript \nimport Link from \"next/link\"\n\n const About = () => {\n   return(\n     <div>\n       <h1>This page is about me!</h1>\n       <Link href=\"/\">Back home</Link>\n     </div>\n   )\n }\n\nexport default About;\n```\n\nNow you should be able to navigate between those pages.\n\n## Routing in Next.js\nAs you might've already understood in Next.js all the routing maps to `pages` folder.\n\n`pages/index.js` => `/` \n`pages/about.js` => `/about`\n\nSay you want to add nested routes, how would you do it? Easy! Let's create 2 new routes:\n`/blog` to list out blogs and `blog/[slug]` to view each individual blogs.\n\nFirst create a folder `blog` inside `pages`, then add 2 files:\n- `index.js` which will map to `/blog` route\n- `[slug].js` which will map to `/blog/your-blog-slug` route\n\nand that's it! \n\n\n## Fetching data \n\nNext.js supports both Static Generation and Server-Side Rendering. Depending on how you would like to fetch your data those two approaches are very handy! \n\nIn order to demonstrate Static Generation you will need to use 2 supporting functions in order to let Next.js to know how to generate pages during build time. \n\n- `getStaticPaths` helps generate routes\n- `getStaticProps` helps to fetch data during build time\n\n### Static Generation\nNow here is an implementation of `pages/blogs/index.js` using Static Generation\n\n```javascript \nconst BlogsPage = ({ blogs }) => (\n  <div>\n    <ul>\n      {blogs.map(blog => (\n        <li>\n          <a href={`/blog/${blog.slug}`}>{blog.title}</a>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nexport const getStaticPaths = async () => {\n  const blogs = require('./blogs.json');\n  const paths = blogs.map(blog => ({\n    params: {\n      slug: blog.slug\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n};\n\nexport const getStaticProps = async () => {\n  const blogs = require('./blogs.json');\n  return {\n    props: {\n      blogs\n    }\n  };\n};\n\nexport default BlogsPage;\n```\n\nas for `blogs.json`, here is a simple json file to have some mock data.\n\n```json\n[\n  {\n    \"title\": \"How to cook pasta. Easy 3 steps!\",\n    \"slug\": \"how-to-cook-pasta-easy-3-steps\",\n    \"content\": \"Some amazing recepy!\"\n  },\n  {\n    \"title\": \"NextJS or GatsbyJS?\",\n    \"slug\": \"nextjs-or-gatsbyjs\",\n    \"content\": \"Obviously NextJS *winkyface*\"\n  },\n  {\n    \"title\": \"Coding your first NextJS blog is easy!\",\n    \"slug\": \"coding-your-first-nextjs-blog-is-easy\",\n    \"content\": \"Blog and NextJS.\"\n  }\n]\n```\nNow if you navigate to `http://localhost:3000/blog` you should be able to see our super fancy styled list of blogs. \n\n### Server-Side Rendering\nLet's make `pages/blog/[slug].js` in order to fetch each individual blog post using `getServerSideProps`\n\n```javascript\nconst Blog = ({ blog }) => (\n  <div>\n    <h1>{blog.title}</h1>\n    <div>{blog.content}</div>\n  </div>\n);\n\nexport const getServerSideProps = async (req) => {\n  const {slug} = req.query;\n  const blogs = require('./blogs.json');\n  const blog = blogs.find(bl => bl.slug === slug);\n\n  return {\n    props: {\n      blog\n    }\n  }\n}\n\nexport default Blog;\n```\n\n## Conclusion\n\nI hope you learned something new in part 1, of this Next.js blog setup series. In the next part I will tell how to make a simple CMS setup to be able to write your blogs using web interface and save files locally as json files. That way you don't need to have a database and you can use github as a data storage!\n\nHere is a [source code](https://github.com/rem4ik4ever/blog-content/tree/master/nextjs-app)  for our app enjoy!\n",
  "thumbnail": null,
  "status": "released",
  "thumbnailUrl": "https://rem-blog-bucket.s3.us-east-2.amazonaws.com/assets/fcf55b87-85fc-4f55-85d7-814a803a1d50-450.png",
  "author": "Rem Kim",
  "createdAt": "2020-05-03T19:21:43.819Z",
  "updatedAt": "2020-05-05T01:39:42.687Z",
  "slug": "setting-up-your-nextjs-blog",
  "id": 1588533703819
}